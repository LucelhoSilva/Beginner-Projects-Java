package calculadoragrafica;

import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 * @author Bianca Mayra & Lucelho Cristiano - 2023 | Calculadora e Lógica de Programação
 */
public class TelaHistorico extends javax.swing.JFrame {

    /**
     * Creates new form TelaHistorico
     */
    
    /*
    Para continuarmos com o mesmo histórico criado na TelaCalculadora, traremos o objeto para cá o passando como parâmetro
    do método construtor.
    Como consequência disso, devemos criar também um método construtor sem parâmetros para que o form consiga simplesmente ser criado.
    */
    public TelaHistorico(Historico historico) {
        initComponents();    
   
        /*
        Ao inicar o frame, vamos listar o histórico na tabela da tela.
        Vamos fazer isso de forma encapsulada com um método após o método construtor.
        */
        listarHistorico(historico);
    }

    public TelaHistorico() {
    }

    /*
    Se quisermos voltar para a tela anterior, precisaremos pegar um objeto dela e salvar aqui.
    */
    TelaCalculadora telaCalculadora;
    
    public void pegarCalculadora(TelaCalculadora telaCalculadora){
        this.telaCalculadora = telaCalculadora;
    }
    
    public void listarHistorico(Historico historico) {
        
        /*
        Para uma tabela, precisamos criar um modelo dizendo quais serão as colunas e o que haverá nelas.
        */
        DefaultTableModel modelo = new DefaultTableModel();
        
        /*
        Adicionamos as colunas "expressão" e "resulatdo", que corresponderão aos atributos salvos no histórico.
        */
        modelo.addColumn("Expressão");
        modelo.addColumn("Resultado");
        
        
        ArrayList<String> expressoes = historico.getExpressoes();
        ArrayList<String> resultados = historico.getResultados();
        
        /*
        Se a lista do histórico estiver vazia, serão impressos esses avisos na tabela.
        */
        if(historico.getExpressoes().isEmpty()){
            modelo.addRow(new String []{"Nenhuma conta", "Nenhum resultadol"});
        }
        /*
        Caso o histórico não esteja vazio, iremos percorres a lista com um laço de repetição.
        O for precisa de um índice (contará o número de repetições ), o limite do índice (define quando parar de repetir) 
        e do compasso (define de quanto em quanto o indice variará até chegar no limite).
        Precismos de um for para ler a lista pois precisamos imprimir todas suas posições, e não apenas uma.
        */
        else{
            for(int i = 0; i<historico.getExpressoes().size();i++){
                modelo.addRow(new String[]{expressoes.get(i), resultados.get(i)});
            }
        }
        
        /*
        Definimos o modelo da tabela como esse que acabamos de criar.
        */
        jTableHistorico.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableHistorico = new javax.swing.JTable();
        jButtonVoltar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setPreferredSize(new java.awt.Dimension(409, 727));
        setSize(new java.awt.Dimension(409, 727));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTableHistorico.setBackground(new java.awt.Color(255, 236, 236));
        jTableHistorico.setBorder(null);
        jTableHistorico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Expressão", "Resultado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableHistorico.setGridColor(new java.awt.Color(255, 138, 210));
        jTableHistorico.setSelectionBackground(new java.awt.Color(255, 236, 236));
        jScrollPane1.setViewportView(jTableHistorico);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 220, 210, 340));

        jButtonVoltar.setBackground(new java.awt.Color(255, 138, 210));
        jButtonVoltar.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jButtonVoltar.setText(" ↩");
        jButtonVoltar.setBorder(null);
        jButtonVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVoltarActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonVoltar, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 640, 60, 40));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/calculadoragrafica/ImagemHistorico.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVoltarActionPerformed
        
        /*
        Ao voltar, a calculadora se torna disponível e a janela do histórico é fechada.
        */
        telaCalculadora.setEnabled(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButtonVoltarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaHistorico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaHistorico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaHistorico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaHistorico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaHistorico().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonVoltar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableHistorico;
    // End of variables declaration//GEN-END:variables
}
